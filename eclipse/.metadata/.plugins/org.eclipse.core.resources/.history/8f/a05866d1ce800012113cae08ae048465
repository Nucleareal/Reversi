package Model.AI;

import java.util.LinkedList;
import java.util.Random;

import Controler.Controler;
import Model.Position;
import Model.ReversiBoard;
import Model.Stone;
import Other.IReversiInfo;

public class AI_Level_1 implements IReversiInfo, AI
{
	private static int MAX_DEPTH = 5;
	private static Random _rand = new Random();

	public Position getNextPosition(ReversiBoard board)
	{
		Controler.lockVictory();
		Node min = new Node(null, -999, null);
		Node max = new Node(null, +999, null);
		Node now = new Node(null,    0, null);
		Position pos;
		Node node = getNextPosition(board, MAX_DEPTH, min, max, now);
		while(node.getParent() != null && node.getParent().getParent() != null)
			node = node.getParent();

		pos = node.getPosition();

		Controler.unlockVictory();

		if(pos == null)
		{
			pos = placeRandomly(board);
		}
		return pos;
	}

	private Position placeRandomly(ReversiBoard board)
	{
		LinkedList<Position> list = new LinkedList<>();
		for(int i = 0; i < XSize; i++)
		{
			for(int j = 0; j < YSize; j++)
			{
				Position pos = new Position(i, j);
				if(board.canPlaceOnPosition(pos))
				{
					list.offer(pos);
				}
			}
		}
		return (list.size() > 0 ? list.get(_rand.nextInt(list.size())) : null);
	}

	public Node getNextPosition(ReversiBoard board, int depth, Node min, Node max, Node now)
	{
		ReversiBoard board0 = null;

		if(depth == 0 || board.getPlaceablePlayer() == 0) return now;

		for(int i = 0; i < XSize; i++)
			for(int j = 0; j < YSize; j++)
			{
				Position pos = new Position(i, j);
				board0 = board.clone();
				if(board0.canPlaceOnPosition(pos))
				{
					int res0 = (depth == MAX_DEPTH ? 0 : now.getValue());
					int res1 = board0.placeAtPast(pos);
					if(board.getTurn() == Stone.White)
					{
						res0 += res1;
						now = new Node(pos, res0, now);
						min = max(min, getNextPosition(board0, depth-1, min, max, now));
						if(min.isEBiggerThan(max))
						{
							return max;
						}
					}
					else
					{
						res0 -= res1;
						now = new Node(pos, res0, now);
						max = min(max, getNextPosition(board0, depth-1, min, max, now));
						if(min.isEBiggerThan(max))
						{
							return min;
						}
					}
				}
			}
		if(board.getTurn() == Stone.White)
		{
			return min;
		}
		else
		{
			return max;
		}
	}

	private Node min(Node a, Node b)
	{
		if(b.isBiggerThan(a))
		{
			return a;
		}
		return b;
	}

	private Node max(Node a, Node b)
	{
		if(a.isBiggerThan(b))
		{
			return a;
		}
		return b;
	}
}

package Controler;

import java.awt.Dimension;
import java.io.File;

import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

import Model.ImageControler;
import Model.Position;
import Model.ReversiBoard;
import Model.Stone;
import Model.AI.AI;
import Model.AI.AI_Level_0;
import Model.AI.AI_Level_4;
import Other.IReversiInfo;
import View.ButtonArrayableFrame;

import com.sun.java.swing.plaf.windows.WindowsLookAndFeel;

public class Controler implements IReversiInfo
{
	private static ButtonArrayableFrame _window;
	private static ReversiBoard _board;
	private static AI _ai;
	private static AI _aj;
	private static boolean _isAIMode = true;
	private static volatile int _Pcount;

	public static void launch()
	{
		JFrame splash = new JFrame();
		splash.setUndecorated(true);
		Dimension dim = new Dimension(300, 200);
		splash.setPreferredSize(dim);
		splash.setSize(dim);

		JLabel label = new JLabel(ImageControler.Splash);
		splash.add(label);

		splash.setVisible(true);
		splash.setLocationRelativeTo(null);

		//ボタンリスナ
		EventObserver.register(new ButtonClickReciver());
		EventObserver.register(new PlayerChangeReciver());
		EventObserver.register(new ReversiEndedReciver());
		EventObserver.register(new MovedNextTurnReciver());

		_ai = new AI_Level_0();
		_aj = new AI_Level_4();
		_Pcount = 0;

		lookAndFeelChange();

		_window = new ButtonArrayableFrame(Title, new Dimension(WinX, WinY));
		_window.pack();
		_window.initialize(XSize, YSize);
		_window.setLocationRelativeTo(null);
		_window.setVisible(true);

		splash.dispose();

		_board = new ReversiBoard();
		_board.initialize();

		setBoardToViewAll();
	}

	public static void setBoardToViewAll()
	{
		for(int i = 0; i < XSize; i++)
			for(int j = 0; j < YSize; j++)
				ModelToView.setInfoToButtons(new Position(i, j), _board, _window);
	}

	private static void lookAndFeelChange()
	{
		try
		{
			UIManager.setLookAndFeel(new WindowsLookAndFeel());
		}
		catch (UnsupportedLookAndFeelException e)
		{
			e.printStackTrace();
		}
	}

	public static void setBoardToView(Position pos)
	{
		ModelToView.setInfoToButtons(pos, _board, _window);
	}

	public static void setClickToModel(Position position)
	{
		ViewToModel.onClicked(position, _board);
	}

	public static void playerChanged(Stone stone)
	{
		ModelToView.setInfoToTitle(stone, _window);
	}

	public static void finishedGame(int[] stoneCounts)
	{
		ModelToView.setEndToTitle(_window, stoneCounts);
	}

	public static void cannotSetedStone()
	{
		ModelToView.onCannotStonePlacing(_window);
	}

	public static void nextTurn()
	{
		if(_isAIMode)
		{
			Stone stone = _board.getTurn();
			switch(stone)
			{
				//case Black: Position pos0 = _ai.getNextPosition(_board, stone); ModelToView.setClicked(pos0, _window); break;
				case White:
				{
					_Pcount = 0;
					_thread = new CountThread(new NextTurnReciver());
					_thread.start();
				}
				default:
				{
					_thread = null;
				}
			}


			//_thread = new TimerThread(new NextTurnReciver(), WAIT_MILLS);
			//_thread.start();
		}
	}

	private static CountThread _thread;

	public static void lockVictory()
	{
		_board.lockVictory();
	}

	public static void unlockVictory()
	{
		_board.unlockVictory();
	}

	public static synchronized void onTimerStopped()
	{
		_Pcount = 0;
		Stone stone = _board.getTurn();
		if(stone != Stone.White) return;
		Position pos1 = _aj.getNextPosition(_board, stone); ModelToView.setClicked(pos1, _window);
	}

	public static void addPainter()
	{
		_Pcount++;
	}

	public static int getPaintCount()
	{
		return _Pcount;
	}

	public static void reset()
	{
		_board.initialize();
	}
}
